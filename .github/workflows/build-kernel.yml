name: AENAâ€™s

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(grep -i -w ANYKERNEL_SOURCE config.env | cut -d '=' -f2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(grep -i -w ANYKERNEL_SOURCE_BRANCH config.env | cut -d '=' -f2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(grep -i -w KERNEL_SOURCE config.env | cut -d '=' -f2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(grep -i -w KERNEL_SOURCE_BRANCH config.env | cut -d '=' -f2)" >> $GITHUB_ENV
          echo "KERNEL_TARGET=$(grep -i -w KERNEL_TARGET config.env | cut -d '=' -f2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(grep -i -w BUILD_ARGS config.env | cut -d ':' -f2)" >> $GITHUB_ENV

      - name: Pull toolchain
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64-linux-android-4.9
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 arm-linux-androideabi-4.9
          mkdir clang
          curl -L https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android12-release/clang-r416183b1.tar.gz \
            | tar -C clang/ -xz

      - name: Pull kernel source
        run: |
          git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} kernel-source
          echo "KERNEL_VERSION=$(sed -n 's/.*CONFIG_LOCALVERSION=\"\([^\"]*\)\".*/\1/p' kernel-source/arch/arm64/configs/${{ env.KERNEL_TARGET }}_defconfig | sed 's/^\\.//')" >> $GITHUB_ENV

      - name: Clean kernel source tree
        run: |
          make -C kernel-source mrproper

      - name: Lower-case all netfilter files
        run: |
          # Handle netfilter headers (IPv4 & IPv6) and net/netfilter sources
          dirs=(
            kernel-source/include/linux/netfilter_ipv4
            kernel-source/include/linux/netfilter_ipv6
            kernel-source/net/netfilter
          )
          for path in "${dirs[@]}"; do
            if [ -d "$path" ]; then
              # depth-first ensures nested entries are renamed before parents
              find "$path" -depth | while read src; do
                dst="$(dirname "$src")/$(basename "$src" | tr '[:upper:]' '[:lower:]')"
                [ "$src" != "$dst" ] && mv "$src" "$dst"
              done
            fi
          done

      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="BUGGY"
          export KBUILD_BUILD_HOST="github"
          export PATH="$GITHUB_WORKSPACE/clang/bin:$PATH"
          make -C kernel-source \
               ARCH=arm64 \
               O=../out \
               ${{ env.BUILD_ARGS }} \
               CLANG_TRIPLE=aarch64-linux-gnu- \
               CROSS_COMPILE=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin/aarch64-linux-android- \
               CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin/arm-linux-androideabi- \
               ${{ env.KERNEL_TARGET }}_defconfig
          make -C kernel-source -j$(( $(getconf _NPROCESSORS_ONLN) * 2 )) \
               ARCH=arm64 \
               O=../out \
               ${{ env.BUILD_ARGS }} \
               CLANG_TRIPLE=aarch64-linux-gnu- \
               CROSS_COMPILE=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin/aarch64-linux-android- \
               CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-

      - name: Package kernel
        run: |
          shopt -s nocaseglob
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          for img in out/arch/arm64/boot/Image*; do
            [[ -f $img ]] && { cp "$img" AnyKernel3/$(basename "$img"); break; }
          done
          for dt in out/arch/arm64/boot/dtbo.*; do
            [[ -f $dt ]] && { cp "$dt" AnyKernel3/$(basename "$dt"); break; }
          done

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KERNEL_VERSION }}_${{ env.KERNEL_TARGET }}
          path: AnyKernel3/*
